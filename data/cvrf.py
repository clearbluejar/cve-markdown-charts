from datetime import datetime
import json
import requests
import os
from functools import lru_cache

MSRC_CVRF_MERGED_PATH = os.path.join(
    os.path.dirname(__file__), 'msrc_merged.json')
MSRC_API_URL = "https://api.msrc.microsoft.com/"
CACHE_PATH = os.path.join(os.path.dirname(__file__), '.cache')


def get_all_knowledge_base_cvrf():
    cvrfs = []    
    url = "{}cvrf/v2.0/updates".format(MSRC_API_URL)
    headers = {}
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        data = json.loads(response.content)

        for cvrf in data['value']:
            get_knowledge_base_cvrf_json(cvrf['ID'])

    return


def get_knowledge_base_cvrf_json(cvrf_id):
    if cvrf_id == None:
        return None

    from time import strptime
    month =  strptime(cvrf_id.split('-')[1],'%b').tm_mon
    year = int(cvrf_id.split('-')[0])
    
    # MSRC CVRF is not available before Apr 2016
    if year < 2016 or year == 2016 and month < 4:
        return None

    cvrf_json = None

    if not os.path.exists(CACHE_PATH):
        os.mkdir(CACHE_PATH)

    # if file exists locally, load it
    cvrf_file = os.path.join(CACHE_PATH, cvrf_id + ".json")

    if not os.path.exists(cvrf_file):        
        url = "{}cvrf/v2.0/cvrf/{}".format(
            MSRC_API_URL, cvrf_id)
        headers = {'Accept': 'application/json'}
        response = requests.get(url, headers=headers)
        # if this fails the data would be incomplete
        assert(response.status_code == 200)
        # cache to disk        
        with open(cvrf_file, 'w') as f:
            json.dump(json.loads(response.content), f)
    else: 
        print(f"Using cached {cvrf_id}")

    assert(os.path.exists(cvrf_file))
    with open(cvrf_file) as f:
        cvrf_json = json.load(f)
    
    return cvrf_json


def create_msrc_merged_cvrf_json(path):

    import glob
    import json

    result = []

    # go ahead and download all the MSRC security updates fresh
    get_all_knowledge_base_cvrf()

    # Use created file unless outdated
    if os.path.exists(path):
        current_year = datetime.now().year
        current_month = datetime.now().month
        mod_time = datetime.fromtimestamp(os.path.getmtime(path))
        if mod_time.month == current_month and mod_time.year == current_year:
            print("{} already up to date.".format(path))
            return
        
    for f in glob.glob(os.path.join(CACHE_PATH, "*.json")):
        with open(f, "r") as infile:
            result.append(json.load(infile))

    with open(path, "w") as outfile:
        json.dump(result, outfile)

    print("Created {} with len {}".format(path,len(result)))

@lru_cache(None)
def get_msrc_merged_cvrf_json():

    try:
        with open(MSRC_CVRF_MERGED_PATH) as f:
            return json.load(f)
    except FileNotFoundError as e:
        raise Exception("Missing {}. Please run {}".format(
            MSRC_CVRF_MERGED_PATH, __file__)) from e


def build_msrc_merged_cvrf():

    # create the merged cvrf json file
    create_msrc_merged_cvrf_json(MSRC_CVRF_MERGED_PATH)

    # open it
    cvrf_json = get_msrc_merged_cvrf_json()

    print("Loaded {} with length {}".format(
        MSRC_CVRF_MERGED_PATH, len(cvrf_json)))


if __name__ == "__main__":
    build_msrc_merged_cvrf()
