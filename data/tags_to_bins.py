import cvrf as cvrfdata
import os
import re
import gzip
import json
import difflib

def clean_tag(tag):
    import re
    tag = tag.lower()
    if len(tag.split()) > 2:
    #if tag != "microsoft windows":
    #     tag = tag.replace("windows",'')
    #     tag = tag.replace("dll",'')
    #     tag = tag.replace("role:",'')
    #     tag = tag.replace("microsoft",'')
    #     tag = tag.replace("and",'')
    #     tag = tag.replace("service",'')
        tag = re.sub('windows|dll|role:|microsoft|and|service|services', '', tag)        
    

    tag = re.sub('[^\. 0-9a-zA-Z]+', '', tag)        


    return tag.strip()

def get_tag_similarity(tag1,tag2):
    
    return difflib.SequenceMatcher(None,clean_tag(tag1).split(),clean_tag(tag2).split()).ratio()




with open('msrc-tags.json', 'r') as f:
    tags_json =json.load(f)

with open('bins-to-description.json', 'r') as f:
    wb_tags_json = json.load(f)

print(len(tags_json))
print(len(wb_tags_json))

tags_to_bins = {}
min_similarity = 0.38

for tag in tags_json:

    tags_to_bins.setdefault(tag,[])

    for wb_tag in wb_tags_json:
        sim = get_tag_similarity(tag,wb_tag)
        if sim > min_similarity:
            #print(f"{sim} - {clean_tag(tag)} - {clean_tag(wb_tag)}")
            [tags_to_bins[tag].append(inner_tag) for inner_tag in wb_tags_json[wb_tag] if inner_tag not in tags_to_bins[tag]]

tags_to_bins = {k: tags_to_bins[k] for k in sorted(tags_to_bins,key=lambda x: x, reverse=True)}

with open('tags-to-bins.json', 'w') as f:
    json.dump(tags_to_bins,f)    