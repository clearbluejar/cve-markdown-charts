from urllib import response
import requests
import datetime
import json
from bs4 import BeautifulSoup
import os
from mdutils.tools.Table import Table
from html import escape

msrc_api_url = "https://api.msrc.microsoft.com/"
api_key = "Your API Key here"

cve_url = "https://cve.mitre.org/cgi-bin/"

def get_cve_list_from_keyword(keyword, strict=True):
    cve_list = []
    url = "{}cvekey.cgi?keyword={}".format(cve_url, str(keyword))
    response = requests.get(url)
    if response.status_code == 200:
        soup = BeautifulSoup(response.content, "html.parser")
        results = soup.find(id="TableWithRules")
        #print(results.prettify())
        tds = results.find_all("td")
        tds = iter(tds)
        for td in tds:
            #print(td.get_text(), end="\n")
            #print(next(tds).get_text(), end="\n"*2)            
            cve_list.append({'id': td.get_text(),'description' : escape(next(tds).get_text().replace('\n',' '))})
        
        
    return json.dumps(cve_list)

#Find the cvrf_id (in the form YYYY-Month) given the CVE of interest
def get_cvrf_id_and_date_for_cve(cve):
    url = "{}Updates('{}')?api-version={}".format(msrc_api_url, str(cve),   str(datetime.datetime.now().year))
    headers = {'api-key': api_key}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        data = json.loads(response.content)
        #print(json.dumps(data, indent=4, sort_keys=True))
    
        cvrf_id = data["value"][0]["ID"]
        releaseDate = data["value"][0]["InitialReleaseDate"]
        url = data["value"][0]["CvrfUrl"]
    else:
        cvrf_id = None
        releaseDate = None
    return cvrf_id,releaseDate,url

#get the cvrf data and extract kd's for the CVE of interest
def get_knowledge_bases_for_cve(cve):
    cvrf_id,releaseDate = get_cvrf_id_and_date_for_cve(cve)
    if cvrf_id == None:
        return []
    url = "{}cvrf/{}?api-Version={}".format(msrc_api_url, cvrf_id, str(datetime.datetime.now().year))
    headers = {'api-key': api_key, 'Accept': 'application/json'}
    response = requests.get(url, headers = headers)
    data = json.loads(response.content)
    #print(json.dumps(data, indent=4, sort_keys=True))
    kbs = {'KB{}'.format(kb['Description']['Value']['Date']) for vuln in data["Vulnerability"] if vuln["CVE"] == cve for kb in vuln["Remediations"]}
    return kbs

def get_knoweldge_base_json(cvrf_id):
    if cvrf_id == None:
        return None
    cvrf_json = None
    # if file exists locally, load it
    cvrf_file = cvrf_id+".json"
    if not os.path.exists(cvrf_file):
        url = "{}cvrf/{}?api-Version={}".format(msrc_api_url, cvrf_id, str(datetime.datetime.now().year))
        headers = {'api-key': api_key, 'Accept': 'application/json'}
        response = requests.get(url, headers = headers)
        with open(cvrf_file, 'w') as f:
            json.dump(json.loads(response.content), f)
        #cvrf_json = json.loads(response.content)

    with open(cvrf_file) as f:
        cvrf_json = json.load(f)

    return cvrf_json

def build_markddown_table_from_cves(cves):

    table_list = []
    table_list.extend(['CVE','Description', 'Release Date', 'KBs', 'Acknowledgments'])
    column_len = len(table_list)
    

    cves = json.loads(cves)
    for cve in cves:
        
        cvrf_id,release_date,url = get_cvrf_id_and_date_for_cve(cve['id'])
        
        print(cve['id'])
        cvrf_json = get_knoweldge_base_json(cvrf_id)
        
        if cvrf_json:
            release_date = '[{}](https://msrc.microsoft.com/update-guide/en-US/vulnerability/{})'.format(release_date,cve['id'])
            #description = [vuln['Title']['Value'] for vuln in cvrf_json["Vulnerability"] if vuln["CVE"] == cve['id']]
            kbs = {'[KB{}]({})-{}'.format(kb['Description']['Value'],kb['URL'],kb.get('FixedBuild')) for vuln in cvrf_json["Vulnerability"] if vuln["CVE"] == cve['id'] for kb in vuln["Remediations"] if (str(kb['Description']['Value']).isnumeric() and 'FixedBuild' in kb)  }
            kbs = sorted(['[{}]({}) - [KB{}]({})'.format(kb.get('FixedBuild'),'https://support.microsoft.com/help/{}'.format(kb['Description']['Value']),kb['Description']['Value'],kb['URL']) for vuln in cvrf_json["Vulnerability"] if vuln["CVE"] == cve['id'] for kb in vuln["Remediations"] if (str(kb['Description']['Value']).isnumeric() and 'catalog' in kb['URL'] )])
            acks = {'{}'.format(ack['Name'][0].get('Value')) for vuln in cvrf_json["Vulnerability"] if vuln["CVE"] == cve['id'] for ack in vuln["Acknowledgments"] }
            #builds = {'KB{}'.format(rem['FixedBuild']) for vuln in cvrf_json["Vulnerability"] if vuln["CVE"] == cve['id'] for rem in vuln["Remediations"] if 'FixedBuild' in rem }
        else:
            kbs = ''
            builds = ''
            acks = ''
                
        
        cve_id = '[{}](https://cve.mitre.org/cgi-bin/cvename.cgi?name={})'.format(cve['id'],cve['id'])

        table_list.extend([cve_id,cve['description'],release_date,'<details>'+'<br>'.join(kbs)+'</details>', '<br>'.join(acks).replace('\n',' ')])
        

        
    print(len(table_list))
    print(column_len*(len(cves)+1))
    cve_table = Table().create_table(columns=column_len, rows=len(cves)+1, text=table_list, text_align='center')

    with open('table.md', 'w') as f:
        f.write(cve_table)
    print(cve_table,flush=True)



def build_markddown_gannt_from_cves(title,cves):

    gannt_template = '''
```mermaid
gantt

title {title}
dateFormat YYYY-MM-DD
axisFormat %Y-%m

section CVE Release Dates
{rows}


	
```
    
    '''
    
    cves = json.loads(cves)
    rows = []
    last_section = None
    hguy = {}
    for num,cve in enumerate(cves):
        cvrf_id,release_date,url = get_cvrf_id_and_date_for_cve(cve['id'])
        
        #handle release dates
        if release_date is None:
            year = cve['id'].split('-')[1]
            release_date = '{}-01-01'.format(cve['id'].split('-')[1])
            cvrf_id = year
        else:
            from datetime import datetime
            release_date = datetime.strptime(release_date,'%Y-%m-%dT%H:%M:%SZ').strftime("%Y-%m-%d")
            #print(release_date)

        # insert section
        #if last_section != cvrf_id:
        #    last_section = cvrf_id
        #    rows.append('section {}'.format(cvrf_id))
        
        row = '{} :cve{}, {}, 30d'.format(cve['id'],num,release_date)

        hguy.setdefault(cvrf_id,[]).append(row)
        #rows.append(row)
    
    #print(list(hguy))
    #hguy = dict(sorted(hguy.items()))
    for k,v in hguy.items():
        rows.append('section {}'.format(k))
        rows.append('\n'.join(v))

    
    gannt = gannt_template.format(title=title,rows='\n'.join(rows))
    with open('gannt.md', 'w') as f:
       
        f.write(gannt)
    print(gannt)


# CVE | Descritption | Release Date () | KBs | Afffected Software | Acknowledgements | CVSS Scores

keyword = "windows print spooler"
# keyword = "remote desktop protocol"
#keyword = "rpc"
#keyword = "cve-2020-1030"
#keyword = "cve-2020-1048"
#keyword = "cve-2020-1048 cve-2020-1337 cve-2020-17001"

# build CVE table from keyword

# build gantt char from keyword
cve_list = get_cve_list_from_keyword(keyword, strict=True)

print(cve_list)

build_markddown_table_from_cves(cve_list)
build_markddown_gannt_from_cves(keyword,cve_list)